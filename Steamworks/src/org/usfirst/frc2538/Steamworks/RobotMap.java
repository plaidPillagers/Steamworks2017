// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.Steamworks;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.ADXL345_I2C;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.I2C;




/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogInput drivetrainRangeFinder1;
    public static Encoder drivetrainLeftEncoder1;
    public static Encoder drivetrainRightEncoder1;
    public static Encoder drivetrainCenterEncoder1;
    public static CANTalon drivetrainleftmotor;
    public static CANTalon drivetrainrightmotor;
    public static CANTalon drivetraincentermotor;
    public static Compressor pnewmaticsCompressor1;
    public static DoubleSolenoid pnewmaticsDoubleSolenoid1;
    public static Encoder shooterRotationEncoder;
    public static SpeedController shooterShooterRotation;
    public static PIDController shooterRotation;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static ADXRS450_Gyro gyro;
    public static ADXL345_I2C accelerometer;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainRangeFinder1 = new AnalogInput(0);
        LiveWindow.addSensor("drivetrain", "RangeFinder1", drivetrainRangeFinder1);
        
        drivetrainLeftEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("drivetrain", "Left Encoder 1", drivetrainLeftEncoder1);
        drivetrainLeftEncoder1.setDistancePerPulse(1.0);
        drivetrainLeftEncoder1.setPIDSourceType(PIDSourceType.kRate);
        drivetrainRightEncoder1 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("drivetrain", "Right  Encoder 1", drivetrainRightEncoder1);
        drivetrainRightEncoder1.setDistancePerPulse(1.0);
        drivetrainRightEncoder1.setPIDSourceType(PIDSourceType.kRate);
        drivetrainCenterEncoder1 = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("drivetrain", "Center Encoder 1", drivetrainCenterEncoder1);
        drivetrainCenterEncoder1.setDistancePerPulse(1.0);
        drivetrainCenterEncoder1.setPIDSourceType(PIDSourceType.kRate);
        drivetrainleftmotor = new CANTalon(1);
        LiveWindow.addActuator("drivetrain", "left motor", drivetrainleftmotor);
        
        drivetrainrightmotor = new CANTalon(2);
        LiveWindow.addActuator("drivetrain", "right motor", drivetrainrightmotor);
        
        drivetraincentermotor = new CANTalon(3);
        LiveWindow.addActuator("drivetrain", "center motor", drivetraincentermotor);
        
        pnewmaticsCompressor1 = new Compressor(0);
        
        
        pnewmaticsDoubleSolenoid1 = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Pnewmatics", "Double Solenoid 1", pnewmaticsDoubleSolenoid1);
        
        shooterRotationEncoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "RotationEncoder", shooterRotationEncoder);
        shooterRotationEncoder.setDistancePerPulse(1.0);
        shooterRotationEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        shooterShooterRotation = new Victor(0);
        LiveWindow.addActuator("Shooter", "ShooterRotation", (Victor) shooterShooterRotation);
        
        shooterRotation = new PIDController(1.0, 0.0, 0.0, 0.0, shooterRotationEncoder, shooterShooterRotation, 0.02);
        LiveWindow.addActuator("Shooter", "Rotation", shooterRotation);
        shooterRotation.setContinuous(false);
        shooterRotation.setAbsoluteTolerance(0.2);

        shooterRotation.setOutputRange(-1.0, 1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        gyro = new ADXRS450_Gyro();
        accelerometer =new ADXL345_I2C(I2C.Port.kOnboard, Accelerometer.Range.k16G);
    }
}
