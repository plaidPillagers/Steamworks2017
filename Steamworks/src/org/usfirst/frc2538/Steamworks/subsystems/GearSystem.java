// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.Steamworks.subsystems;

import org.usfirst.frc2538.Steamworks.RobotMap;
import org.usfirst.frc2538.Steamworks.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class GearSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid tilt = RobotMap.gearSystemTilt;
    private final DigitalInput open = RobotMap.gearSystemOpen;
    private final DigitalInput close = RobotMap.gearSystemClose;
    private final CANTalon gate = RobotMap.gearSystemGate;
    private final DoubleSolenoid register = RobotMap.gearSystemRegister;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean isOpen(){
    	return open.get();
    	
    }
    public boolean isClosed(){
    	return close.get();
    }
    public boolean openGate(){
    	if(!isOpen()){
    		gate.set(0.4);
    		SmartDashboard.putString("gate", "opening");
    		return false;
    	}else{
    		gate.set(0.0);
    		SmartDashboard.putString("gate", "opened");
    		return true;
    	}
  
    }
    public boolean closeGate(){
    	
    	if(!isClosed()){
    		gate.set(-0.4);
    		SmartDashboard.putString("gate", "closing");
    		return false;
    	}else{
    		gate.set(0.0);
    		SmartDashboard.putString("gate", "closed");
    		return true;
    	}
    }
    public boolean TiltIn(){
    	tilt.set(DoubleSolenoid.Value.kForward);
    	return true;
    }
    public boolean TiltOut(){
    tilt.set(DoubleSolenoid.Value.kReverse);
    return true;
    }
    
}


